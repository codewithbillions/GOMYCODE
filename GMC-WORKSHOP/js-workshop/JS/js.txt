1) WHAT IS JAVASCRIPT
High level, Interpreted Programming Language
Conforms to the ECMAScript specification (ActionScript, JavaScript, JScript)
Runs on the Client/Browser ((as well as on the server (Node.js)))

2) IMPORTING
link it from the script tag, just below the body tag.

3) LOGGING OUTPUT & CONSOLE
alert('Hello World'); // Do not use for debugging. Stops the script!
console.log('Hello World');
console.log(prompt("age"))

4) DECLARING VARIABLE(VAR, LET, CONST)
const name = "someone"
let age = 99;
//let can be re-assigned, const can not
name = "someone2"
age = 100;
console.log(age)

5) DATA TYPES
String, Number, Boolean (6 falsies), Null, Undefined, Symbol, Object
Arrays, Functions, Objects

// ************ PRIMITIVE TYPES
const name = 'Adam';
const age = 37;
const rating = 3.5;
const isPerson = true;
const x = null;
let z; // undefined;
console.log(
`the variable "XXX" has the value "${XXX}" & the type of "${typeof XXX}"`
);

// ************ ARRAYS - Store multiple values in a variable
let numbers = [1, 2, 3, 4, 5];
let fruits = ['apples', 'oranges', 'pears', 'grapes'];
let hobbies = ["sleep", 33, true];

console.log(numbers);
console.log(fruits);
console.log(hobbies);

// ************ OBJECTS LITERALS
const person = {
name: "Eve",
age: 5000,
isPerson: true,
hobbies: ["eating", "sleeping"]
};

console.log(person);

// ************ FUNCTIONS (as a type)
function dummyFunc(){}

// Check type
console.log(typeof dummyFunc);

6) STRING CONCATENATION 
let name = "Fola"
let age = 99

// Archaic method
console.log('My name is ' + name + ' and I am ' + age);

//Template literal (use this one!)
console.log(`My name is ${name} and I am ${2+3}`);

//************ Special Characters (\, \', \n, \\)
console.log('je m\'appelle wtvr')

7) STRING METHODS & PROPERTIES
let s = 'Hello World';
let val;

// Get length
val = s.length;

// String Index
console.log(s[0]);

// Change case
val = s.toUpperCase();
val = s.toLowerCase();

let s = "HELLO WORLD";
console.log(s.toLowerCase());

// // Get sub string
val = s.substring(0, 5);

Split into array
val = s.split('');
val = val.join('+');

console.log(s)
console.log(val)

8) ARRAY METHODS & PROPERTIES
const colors = ['black', 'white', 'red', 'blue'];
console.log(colors)

// Get length
console.log(colors.length)

// Get one value (!: Arrays start at 0), the index of 3
console.log(colors[3]);

colors.splice(1, 0, "pink", "purple")

// Add value using push()
colors.push('yellow');

// Add to beginning
colors.unshift('purple');

// Remove last value
colors.pop();

// Remove first value
colors.shift();

// Check if array
console.log(Array.isArray(colors));

// Get index
console.log(colors.indexOf('ssss'));

console.log(colors);

9) ARITHMETIC OPERATORS
// + , - , * , / , % , ++ , -- , **

console.log(13-2)
console.log('3'*'2')
console.log(3*'TEXT')
console.log('10'/'2')
console.log(10%2)
console.log(10%3)
console.log('3'**'2')

console.log(5+3)
console.log(5+'3')

let y = 5
console.log(++y)
console.log(y)


10) OBJECT LITERIALS
const person = { // an object is a collection of key-value pairS
firstName: 'Adam',
age: 30,
hobbies: ['music', 'movies', 'sports'],
address: {
street: '66 Main st',
city: 'wtvr',
state: 'over there'
}
};

// Get single value (obj.key)
console.log(person.firstName)

// Add property
person.email = 'adam@gmail.com';
person.hobbies.push('singing');
console.log(person);

// // ************ /!\ Array of objects
// const users = [
// {
// name: 'person',
// age: 23,
// email: "p1@gmail.com",
// },
// {
// name: 'person 2',
// age: 31,
// email: "p2@gmail.com",
// },
// {
// name: 'person 3',
// age: 155,
// email: "p3@gmail.com",
// }
// ];

// console.table(users)

11) Const mutability
// *** Objects
const person = {
name: 'foulan',
age:27,
adresse:'tunis'}

// Change a property
person.name = 'mohamed'

// Delete a property
delete(person.age)

// Add a property
person.email = 'm@gmail.com';

console.log(person)

// *** Tables
const numbers = [1,2,3]

numbers[1] = 'hello'

console.log(numbers)

12) COMPARISON OPERATORS
// = assigns a value to a variable*

// == compares the value of the variables

// === compares the value and type of the variables

// ! returns the opposite boolean

// != compares the inequality based on value

// !== compares the inequality based on value and type

13) LOGICAL OPERATORS
Thats the AND(&&), OR(||) and the NOT(!) operators

14) LOOPS
// ********************** For
for (let i = 1; i <= 10; i++) {
console.log(`For Loop Number: ${i}`);
}

// ********************** While
let i = 1;
while (i <= 10) {
console.log(`While Loop Number: ${i}`);
i++;
}

// ********************** Loop Through Arrays
const numbers = [80, 29, 25]
const numbers = [99, 70, 66];

// // ********************** For Loop
for (let i = 0; i < numbers.length; i++) {
console.log(numbers[i]);
}

// // ********************** For...of Loop
for (let x of numbers) {
console.log(x);
}

// // ********************** For...in Loop

for (let i in numbers) {
console.log(numbers[i]);

}

15) CONDITIONALS
// **** Simple If/Else Statement
// const x = 30;

// if (x === 10) {
// console.log('x is 10');
// } else if (x > 10) {
// console.log('x is greater than 10');
// } else {
// console.log('x is less than 10');
// }

// ***** Switch (/!\break)
// let color = 'black';

// switch (color) {
// case 'red':
// console.log('color is red');
// break;
// case 'blue':
// console.log('color is blue');
// break;
// default:
// console.log('color is neither red nor blue');
// }

// ***** Ternary operator / Shorthand if
// let colorQualified = color === "red" ? "is red" : "isn't red";
// console.log(`Color ${colorQualified}!`);

16) FUNCTIONS
function greet(x = 3) { 
	return `Hello my name is ${x}`; 
}
console.log(greet('Daniel'));

// ARROW FUNCTIONS
const greet = name => { console.log(`Hello my name is ${name}`); };

greet('Adam');

